#!/bin/bash

# Reset
ResetColor='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White




work_path=~/Work/
cd $work_path
projects=$(ls | grep -v .iml | grep -v lib | grep -v Socialization)

function pull_project {

    project=$1
    cd $work_path/$project

    is_modified=$(if [[ -n $(git status | grep modified) ]]; then echo true; fi)
    #echo $is_modified

    current_branch=$(git status | head -1 | awk '{{ print $3 }}')

    echo -e "${Blue}Pulling ${Purple}$project${ResetColor}${Blue} project:${ResetColor}"
    if [[ -z $is_modified ]]; then 
        if [[ $current_branch == master ]]; then
            echo "git pull origin master"
            git pull origin master
            echo -e "${Green}Project: ${Yellow}$project${ResetColor}${Green} was succesfully pulled.${ResetColor}"
            echo ""
        else
            echo -e "${Red}Project: ${Yellow}$project${ResetColor}${Red} is not master.${ResetColor}"
            echo "Path: $(pwd)"
            echo ""
        fi
    else
        echo -e "${Red}Project: ${Yellow}$project${ResetColor}${Red} with Branche: ${ResetColor}$current_branch${ResetColor}${Red} cannot pull."
        echo -e "Check if project is not modified.${ResetColor}"
        echo "Path: $(pwd)"
        echo ""
    fi
}

#pull_project SocialService

echo ""
for project in $projects ; do 
    pull_project $project
done
